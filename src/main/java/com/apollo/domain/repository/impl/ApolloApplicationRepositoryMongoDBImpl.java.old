/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.apollo.infrastructure.persistence.mongodb;

import com.apollo.common.repository.impl.BaseRepositoryMongoDBImpl;
import com.apollo.domain.model.application.ApolloApplication;
import com.apollo.domain.model.application.ApolloApplicationRepository;
import com.google.gson.Gson;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBObject;
import com.mongodb.util.JSON;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author schari
 */
public class ApolloApplicationRepositoryMongoDBImpl extends BaseRepositoryMongoDBImpl<ApolloApplication, String>
        implements ApolloApplicationRepository {

    private static final Logger logger = LoggerFactory
            .getLogger(BaseRepositoryMongoDBImpl.class);

    public ApolloApplicationRepositoryMongoDBImpl(DB db) {
        //create the database and collection
        super(ApolloApplication.class, db);
        
        //now setup servers and networks as the application's children.
        getDB();
    }

    //find an applicaiton by name
    public ApolloApplication get(String appName) {
        logger.debug("get-build query:{}", ToStringBuilder.reflectionToString(appName, ToStringStyle.MULTI_LINE_STYLE));
        BasicDBObject query = new BasicDBObject("name", appName);

        logger.debug("get-build find:{}", ToStringBuilder.reflectionToString(appName, ToStringStyle.MULTI_LINE_STYLE));
        DBObject dbObject = (DBObject) getCollection().findOne(query);
        if (dbObject == null) {
            logger.debug("get-find:{} could not find application", ToStringBuilder.reflectionToString(appName, ToStringStyle.MULTI_LINE_STYLE));
            return null;
        }

        //extract the ApolloApplication from the dbObject
        Gson g = new Gson();
        ApolloApplication retObj = g.fromJson(JSON.serialize(dbObject), ApolloApplication.class);

        return retObj;
    }
}
